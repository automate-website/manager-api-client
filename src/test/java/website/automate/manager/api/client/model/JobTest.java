/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 23 09:04:29 CET 2017
 */

package website.automate.manager.api.client.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import org.junit.Test;

public class JobTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Job job0 = new Job();
      Double double0 = new Double(513.2738938325003);
      job0.setTimeout(double0);
      Double double1 = job0.getTimeout();
      assertEquals(513.2738938325003, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Job job0 = new Job();
      Double double0 = new Double((-1025.4874901887697));
      job0.setTimeout(double0);
      Double double1 = job0.getTimeout();
      assertEquals((-1025.4874901887697), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Job job0 = new Job();
      Job.TakeScreenshots job_TakeScreenshots0 = Job.TakeScreenshots.ON_FAILURE;
      job0.setTakeScreenshots(job_TakeScreenshots0);
      Job.TakeScreenshots job_TakeScreenshots1 = job0.getTakeScreenshots();
      assertEquals(Job.TakeScreenshots.ON_FAILURE, job_TakeScreenshots1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Job job0 = new Job();
      Job.JobStatus job_JobStatus0 = Job.JobStatus.RUNNING;
      job0.setStatus(job_JobStatus0);
      Job.JobStatus job_JobStatus1 = job0.getStatus();
      assertEquals(Job.JobStatus.RUNNING, job_JobStatus1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Job job0 = new Job();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      job0.setScenarioIds(linkedHashSet0);
      Set<String> set0 = job0.getScenarioIds();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Job job0 = new Job();
      job0.setResolution("v");
      String string0 = job0.getResolution();
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Job job0 = new Job();
      job0.setContext((Map<String, String>) null);
      Map<String, String> map0 = job0.getContext();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Job job0 = new Job();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      job0.setContext(hashMap0);
      Map<String, String> map0 = job0.getContext();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Job job0 = new Job();
      job0.setBoxId("N");
      String string0 = job0.getBoxId();
      assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Job job0 = new Job();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      job0.setScenarioIds(linkedHashSet0);
      Set<String> set0 = job0.getScenarioIds();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Job job0 = new Job();
      Set<String> set0 = job0.getScenarioIds();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Job job0 = new Job();
      Double double0 = new Double(0.0);
      job0.setTimeout(double0);
      Double double1 = job0.getTimeout();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Job job0 = new Job();
      Double double0 = job0.getTimeout();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Job job0 = new Job();
      job0.setBoxId("");
      String string0 = job0.getBoxId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Job job0 = new Job();
      Map<String, String> map0 = job0.getContext();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Job job0 = new Job();
      job0.setTitle("");
      String string0 = job0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Job job0 = new Job();
      String string0 = job0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Job job0 = new Job();
      Report report0 = job0.getReport();
      assertNull(report0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Job job0 = new Job();
      String string0 = job0.getBoxId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Job job0 = new Job();
      job0.getStatus();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Job job0 = new Job();
      Report report0 = new Report();
      job0.setReport(report0);
      Report report1 = job0.getReport();
      assertSame(report1, report0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Job job0 = new Job();
      String string0 = job0.getResolution();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Job job0 = new Job();
      job0.getTakeScreenshots();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Job job0 = new Job();
      job0.setResolution("");
      String string0 = job0.getResolution();
      assertEquals("", string0);
  }
}
